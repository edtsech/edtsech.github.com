<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: haskell | (edtsech :notes)]]></title>
  <link href="http://edtsech.github.com/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://edtsech.github.com/"/>
  <updated>2013-01-20T15:33:48+01:00</updated>
  <id>http://edtsech.github.com/</id>
  <author>
    <name><![CDATA[Edward Tsech]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haskell Operators]]></title>
    <link href="http://edtsech.github.com/2012/11/haskell-operators.html"/>
    <updated>2012-11-10T00:00:00+01:00</updated>
    <id>http://edtsech.github.com/2012/11/haskell-operators</id>
    <content type="html"><![CDATA[<p>Haskell operators are just functions like in Lisp.</p>

<p>``` clj</p>

<pre><code>(+ 1 2)
(+ 1 2 3)
</code></pre>

<p>```</p>

<p>To get a type of the <code>+</code> operator we should use parentheses.</p>

<p>``` haskell</p>

<pre><code>Prelude&gt; :type (+)
(+) :: Num a =&gt; a -&gt; a -&gt; a
</code></pre>

<p>```</p>

<p>It's just a function, it takes two arguments of type Num and return something of type Num.
Let's try.</p>

<p>``` haskell</p>

<pre><code>Prelude&gt; (+) 1 2
3
</code></pre>

<p>```</p>

<p>To use it with more that two arguments we should use list and fold.</p>

<p>``` haskell</p>

<pre><code>Prelude&gt; foldl1 (+) [1,2,3]
6
</code></pre>

<p>```</p>

<h2>Carrying</h2>

<p>If it's just a function we can use carrying.</p>

<p>``` haskell</p>

<pre><code>Prelude&gt; let inc = (+1)
Prelude&gt; inc 1
2
</code></pre>

<p>```</p>

<p>We can use it everywhere.</p>

<p>``` haskell</p>

<pre><code>Prelude&gt; map inc [1,2,3]
[2,3,4]
</code></pre>

<p>```</p>

<p>or just</p>

<p>``` haskell</p>

<pre><code>Prelude&gt; map (+1) [1,2,3]
[2,3,4]
</code></pre>

<p>```</p>

<p>I mean no magic here, <code>(+1)</code> is just a carried function.</p>

<p>It's also true not only for arithmetic operators.</p>

<p>``` haskell</p>

<pre><code>Prelude&gt; :type (||)
(||) :: Bool -&gt; Bool -&gt; Boo
Prelude&gt; (||) True Falsel
True
</code></pre>

<p>```</p>

<h2>Peace!</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carrying in Haskell]]></title>
    <link href="http://edtsech.github.com/2012/11/carrying-in-haskell.html"/>
    <updated>2012-11-10T00:00:00+01:00</updated>
    <id>http://edtsech.github.com/2012/11/carrying-in-haskell</id>
    <content type="html"><![CDATA[<p>Carrying in Haskell is enabled by default. It means each function takes one argument and returns result or other function.</p>

<p>``` haskell</p>

<pre><code>Prelude&gt; :type (+)
(+) :: Num a =&gt; a -&gt; a -&gt; a
</code></pre>

<p>```</p>

<p>In fact it's the same as:</p>

<p>``` haskell</p>

<pre><code>(+) :: Num a =&gt; (a -&gt; (a -&gt; a))
</code></pre>

<p>```</p>

<p>This expression means we have function that takes on argument of type Num and returns another
function which takes one argument of type Num and return element of type Num.</p>

<p>These expressions are equal:</p>

<p><code>haskell
((+) 1 2)
(((+) 1) 2)
</code></p>

<p><code>haskell
Prelude&gt; let inc = (+) 1
Prelude&gt; inc 2
3
</code></p>

<p>And these definitions are also equal:</p>

<p><code>haskell
let sum x y = x + y
let sum = \x y -&gt; x + y
let sum = \x -&gt; \y -&gt; x + y
</code></p>

<h2>Peace!</h2>
]]></content>
  </entry>
  
</feed>
